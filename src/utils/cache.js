/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π localStorage
 */

// –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const memoryCache = new Map()

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (30 –º–∏–Ω—É—Ç)
const CACHE_DURATION = 30 * 60 * 1000

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
 * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
 * @returns {any|null} - –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
 */
export const getFromCache = (key) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    if (memoryCache.has(key)) {
        const cached = memoryCache.get(key)
        if (Date.now() - cached.timestamp < CACHE_DURATION) {
            const age = Math.floor((Date.now() - cached.timestamp) / 1000)
            console.log(`%cüì¶ –ö–≠–® (–ü–∞–º—è—Ç—å) %c${key} %c(${age}—Å –Ω–∞–∑–∞–¥)`,
                'background: #667eea; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold',
                'color: #8b9bff; font-weight: bold',
                'color: #a0a5ab; font-style: italic')
            return cached.data
        } else {
            memoryCache.delete(key)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    try {
        const cached = localStorage.getItem(key)
        if (cached) {
            const parsed = JSON.parse(cached)
            if (Date.now() - parsed.timestamp < CACHE_DURATION) {
                const age = Math.floor((Date.now() - parsed.timestamp) / 1000)
                console.log(`%cüíæ –ö–≠–® (Storage) %c${key} %c(${age}—Å –Ω–∞–∑–∞–¥)`,
                    'background: #48dbfb; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold',
                    'color: #8b9bff; font-weight: bold',
                    'color: #a0a5ab; font-style: italic')
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                memoryCache.set(key, parsed)
                return parsed.data
            } else {
                localStorage.removeItem(key)
            }
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:', err)
    }

    return null
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
 * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
 * @param {any} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const saveToCache = (key, data) => {
    const cacheObject = {
        data,
        timestamp: Date.now()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    memoryCache.set(key, cacheObject)
    const dataSize = JSON.stringify(data).length
    const sizeKb = (dataSize / 1024).toFixed(2)
    console.log(`%cüíæ –°–û–•–†–ê–ù–ï–ù–û %c${key} %c(${sizeKb} KB)`,
        'background: #4ecdc4; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold',
        'color: #8b9bff; font-weight: bold',
        'color: #a0a5ab; font-style: italic')

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
        localStorage.setItem(key, JSON.stringify(cacheObject))
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ localStorage:', err)
        // –ï—Å–ª–∏ localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if (err.name === 'QuotaExceededError') {
            console.warn('‚ö†Ô∏è localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...')
            clearOldCache()
            try {
                localStorage.setItem(key, JSON.stringify(cacheObject))
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏')
            } catch (retryErr) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', retryErr)
            }
        }
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
 */
export const clearCache = () => {
    const memSize = memoryCache.size
    memoryCache.clear()

    let localStorageCount = 0
    try {
        const keys = Object.keys(localStorage)
        keys.forEach(key => {
            if (key.startsWith('country_') || key.startsWith('geo_') || key === 'countries_all') {
                localStorage.removeItem(key)
                localStorageCount++
            }
        })
        console.log(`%cüóëÔ∏è –ö–≠–® –û–ß–ò–©–ï–ù %c–ü–∞–º—è—Ç—å: ${memSize}, Storage: ${localStorageCount}`,
            'background: #f06595; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold',
            'color: #a0a5ab')
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', err)
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ localStorage
 */
export const clearOldCache = () => {
    let removedCount = 0
    try {
        const keys = Object.keys(localStorage)
        keys.forEach(key => {
            if (key.startsWith('country_') || key.startsWith('geo_') || key === 'countries_all') {
                try {
                    const cached = JSON.parse(localStorage.getItem(key))
                    if (Date.now() - cached.timestamp >= CACHE_DURATION) {
                        localStorage.removeItem(key)
                        removedCount++
                    }
                } catch (err) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —É–¥–∞–ª—è–µ–º
                    localStorage.removeItem(key)
                    removedCount++
                }
            }
        })
        if (removedCount > 0) {
            console.log(`%cüßπ –û–ß–ò–°–¢–ö–ê %c–£–¥–∞–ª–µ–Ω–æ ${removedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`,
                'background: #ffa500; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold',
                'color: #a0a5ab')
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err)
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
 */
export const getCacheSize = () => {
    return {
        memory: memoryCache.size,
        localStorage: Object.keys(localStorage).filter(
            key => key.startsWith('country_') || key.startsWith('geo_') || key === 'countries_all'
        ).length
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
 * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
 * @returns {boolean}
 */
export const hasCache = (key) => {
    if (memoryCache.has(key)) {
        const cached = memoryCache.get(key)
        return Date.now() - cached.timestamp < CACHE_DURATION
    }

    try {
        const cached = localStorage.getItem(key)
        if (cached) {
            const parsed = JSON.parse(cached)
            return Date.now() - parsed.timestamp < CACHE_DURATION
        }
    } catch (err) {
        return false
    }

    return false
}

